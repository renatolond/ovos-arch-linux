name: Conditional Makefile rebuild

on:
  push:
    branches:
      - main

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: nrwl/last-successful-commit-action@v1
        id: last_successful_commit
        with:
          branch: 'main'
          workflow_id: 'update-makefile.yml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for changes in PKGBUILD folders
        id: check_assets
        run: |
          last_successful_commit="${{ steps.last_successful_commit.outputs.commit_hash }}"

          commit_message=$(git log -1 --pretty=%B)
          if [[ $commit_message =~ "\#NoRebuild" ]]; then
            echo "Skipping PKGBUILDs check due to #NoRebuild or [No Rebuild] in commit message"
            echo "has_PKGBUILD_changes=false" >> $GITHUB_OUTPUT
            echo "has_AUR_lock_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          git diff --name-only "${last_successful_commit}..HEAD" -- 'PKGBUILDs/*/PKGBUILD' 'PKGBUILDs-extra/*/PKGBUILD' > /tmp/changed_PKGBUILDs.txt
          if grep -qE 'PKGBUILDs/|PKGBUILDs-extra/' /tmp/changed_PKGBUILDs.txt; then
            echo "PKGBUILDs changed. .SCRINFO will be updated in the matrix task..."
            # The task will also output the list of PKGBUILDs paths as `set-output` variable encoded in json array
            pkgbuilds=()
            while IFS= read -r file; do
              pkgbuilds+=("$file")
              echo "Changed: $file"
            done < /tmp/changed_PKGBUILDs.txt
            echo "has_PKGBUILD_changes=true"
            echo "has_PKGBUILD_changes=true" >> $GITHUB_OUTPUT
            json=$(echo "${pkgbuilds[@]}" | jq -R . | jq --indent 0 -s .) # encode array as json
            echo "pkgbuilds=$json"
            echo "pkgbuilds=$json" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only '${last_successful_commit}..HEAD' -- aur.lock | grep -q 'aur.lock'; then
            echo "aur.lock changed."
            make aur-lock
            echo "has_AUR_lock_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes in Makefile
        if: steps.check_assets.outputs.has_PKGBUILD_changes == 'true' || steps.check_assets.outputs.has_AUR_lock_changes == 'true'
        uses: ./.github/actions/makepkg
        with:
          operation: makefile-update
          packages: ${{ steps.check_assets.outputs.pkgbuilds }}
          rebuildall: false

      - name: Rebuild Makefile
        if: steps.check_assets.outputs.has_PKGBUILD_changes == 'true' || steps.check_assets.outputs.has_AUR_lock_changes == 'true'
        id: rebuild_makefile
        run: ./tools/generate-makefile.ps1 -SkipSrcInfoCheck
        shell: pwsh

      - name: Commit changes
        if: steps.check_assets.outputs.has_PKGBUILD_changes == 'true' || steps.check_assets.outputs.has_AUR_lock_changes == 'true'
        run: |
          git config --local user.email "ovos-arch-buildbot@noemail.local"
          git config --local user.name "OVOS Arch BuildBot"
          git add .
          git diff-index --quiet HEAD || git commit -m "Update Makefile"
          git push

          # Update the last successful commit hash
          echo "last_successful_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      has_PKGBUILD_changes: ${{ steps.check_assets.outputs.has_PKGBUILD_changes }}
      has_AUR_lock_changes: ${{ steps.check_assets.outputs.has_AUR_lock_changes }}
      pkgbuilds: ${{ steps.check_assets.outputs.pkgbuilds }}
      commit_hash: ${{ steps.rebuild_makefile.outputs.last_successful_commit }}

  # Because running QEMU builds on GitHub Actions is slow as molasses AND because the project's
  # python packages are predominantly built for the `any` architecture, we will first build
  # the x86_64 target and then distribute any `any` packages to the other architectures. 
  # This stage will filter out `any` packages and will pass down native packages to the next stage(s)
  package-build-amd64:
    needs: check
    if: needs.check.outputs.has_PKGBUILD_changes == 'true'
    runs-on: ubuntu-latest
    name: Build x86_64 packages
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        ref: ${{ needs.check.outputs.commit_hash }}
    - name: "Download repo from Azure Blob Storage"
      if: false
      run: |
        echo "Downloading repo DB..."
        mkdir -p .repo/{x86_64,aarch64}        
        wget https://ovosarchlinuxpkgs.blob.core.windows.net/ovos-arch/x86_64/ovos-arch.db.tar.gz -O .repo/x86_64/ovos-arch.db.tar.gz
        wget https://ovosarchlinuxpkgs.blob.core.windows.net/ovos-arch/aarch64/ovos-arch.db.tar.gz -O .repo/aarch64/ovos-arch.db.tar.gz
        cp .repo/x86_64/ovos-arch.db.tar.gz .repo/x86_64/ovos-arch.db.tar.gz.bak
        cp .repo/aarch64/ovos-arch.db.tar.gz .repo/aarch64/ovos-arch.db.tar.gz.bak
    - name: "Build on x86_64"
      uses: ./.github/actions/makepkg
      with:
        operation: repo-build
        packages: ${{ needs.check.outputs.pkgbuilds }}
        rebuildall: false
        repourl: https://ovosarchlinuxpkgs.blob.core.windows.net/ovos-arch
    - name: "Upload packages"
      run: |
        ls -la .repo/x86_64
        ls -la .repo/aarch64
    outputs:
      has_PKGBUILD_changes: "false"
      pkgbuilds: ${{ needs.check.outputs.pkgbuilds }}

  package-build-arm:
    needs: package-build-amd64
    if: needs.package-build-amd64.outputs.has_PKGBUILD_changes == 'true'
    runs-on: ubuntu-latest
    name: Build ARM packages
    # strategy:
    #   matrix:
    #     arch: ['aarch64']
    steps:
    - name: "Building aarch64" # "Build on ${{ matrix.arch }}"
      run: |
        echo "TODO....."