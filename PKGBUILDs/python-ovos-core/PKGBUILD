_gh_org=OpenVoiceOS
_gh_proj=ovos-core
pkgname=python-ovos-core
_name=ovos-core
_unit_name_skills="ovos-skills-messagebus"
_base_ver='e4cabf257c278e183d5c77aaaa3c920028e4f51f'
pkgver=0.0.8a21
pkgrel=2
pkgdesc='OVOS-core is a backwards-compatible descendant of
Mycroft-core, the central component of Mycroft'
arch=('any')
url='https://github.com/OpenVoiceOS/ovos-core/'
license=('Apache')
depends=('ovos-service-base' 'ovos-messagebus-server' 'python' 'python-sdnotify' \
'python-adapt-parser>=1.0.0' #<2.0.0,>=1.0.0 \
'python-combo-lock>=0.2.2' #<0.3,>=0.2.2 \
'python-ovos-backend-client>=0.0.6' #<0.1.0,>=0.0.6 \
'python-ovos-bus-client>=0.0.4a3' #<0.1.0,>=0.0.4a3 \
'python-ovos-workshop>=0.0.12a17' #<0.1.0,>=0.0.12a17 \
'python-ovos-classifiers>=0.0.0a3' #<0.1.0,>=0.0.0a3 \
'python-ovos-config>=0.0.8' #>=0.0.8,~=0.0 \
'python-ovos-lingua-franca>=0.4.7' \
'python-ovos-plugin-manager>=0.0.23a9' #<0.1.0,>=0.0.23a9 \
'python-ovos-utils>=0.0.33a5' #<0.1.0,>=0.0.33a5 \
'python-padacioso' \
'python-dateutil>=2.6' #<3.0,>=2.6 \
'python-requests>=2.26' #<3.0,>=2.26 \
'python-watchdog>=2.1' #<3.0,>=2.1 \
)
conflicts=( 'python-adapt-parser>=2.0.0' \
 'python-combo-lock>=0.3' \
 'python-ovos-backend-client>=0.1.0' \
 'python-ovos-bus-client>=0.1.0' \
 'python-ovos-workshop>=0.1.0' \
 'python-ovos-classifiers>=0.1.0' \
 'python-ovos-plugin-manager>=0.1.0' \
 'python-ovos-utils>=0.1.0' \
 'python-dateutil>=3.0' \
 'python-requests>=3.0' \
 'python-watchdog>=3.0')
makedepends=(python-build python-installer python-wheel python-setuptools)
provides=("$_unit_name_skills")
conflicts+=("$_unit_name_skills")

source=("https://github.com/$_gh_org/$_gh_proj/archive/$_base_ver.tar.gz" \
    "$_unit_name_skills.service" \
    "ovos-systemd_skills_messagebus.py" \
    # "python-ovos-skills.install" \
)
sha256sums=('75d08ffe718700b3112225c2c1391c1b96d6c772839dd9522f63118033cb15ff'
            '75c9c0a3e6b9aa13a50c20acad46299f010abc7fdb64184d16fbb550959a2406'
            'bd403865bdadd82502beb861589da1e050d6885702b6b1a5f6911cdf2de4742a')

prepare() {
    cd "$srcdir"
    for patch in "../"*.patch; do
        if [ -f "$patch" ]; then
          echo "Applying patch $patch"
          patch --forward --strip=1 --input="${PWD}/${patch}" --directory="${srcdir}/${_name}-${_base_ver}"
        fi
    done
}

pkgver(){
    cd "$srcdir/$_name-$_base_ver"
    echo "$(python setup.py --version)"
}

build() {
    cd "$_name-$_base_ver"
    python -m build --wheel --no-isolation
}

check() {
    cd "$_name-$_base_ver"

    local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
    local python_version=$(python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')

    # nosetests
    # pytest
}

package() {
    cd "$_name-$_base_ver"

    echo "Installing $pkgname to $pkgdir"
    # some packages produce multiple wheels, install the one specific to the version of the package
    python -m installer --destdir="$pkgdir" dist/*$pkgver*.whl

    # Optional: Copy documentation files
    if [ -d "$srcdir/$pkgname/docs" ]; then
        mkdir -p "$pkgdir/usr/share/doc/$pkgname"  # Create doc directory
        cp -r "$srcdir/$pkgname/docs" "$pkgdir/usr/share/doc/$pkgname" || true
        chmod 644 "$pkgdir/usr/share/doc/$pkgname"/*.txt  || true # Set read permissions for documentation files
    fi
    
    # Optional: Remove unused files or directories
    # For example, removing unneeded binaries, license files, etc.
    # rm "$pkgdir/usr/bin/unneeded_binary"  # Remove unneeded binary
    # rm "$pkgdir/usr/share/doc/$pkgname/unneeded_license.txt"  # Remove unneeded license file

    # Search for license files in the original source directory
    mkdir -p $pkgdir/usr/share/licenses/$pkgname
    find "$srcdir" -maxdepth 2 -type f -name 'LICENSE*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
    find "$srcdir" -maxdepth 1 -type f -name 'COPYING*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +

    mkdir -p "$pkgdir/usr/lib/systemd/system"
    install -Dm644 "$srcdir/$_unit_name_skills.service" "$pkgdir/usr/lib/systemd/system"

    mkdir -p "$pkgdir/etc/systemd/system/$_unit_name_skills.d/"
    install -Dm644 "$srcdir/ovos-systemd_skills_messagebus.py" "$pkgdir/etc/systemd/system/$_unit_name_skills.d/"
}


################################################################################
# #
# # python-ovos-core
# #
# ################################################################################
# 
# PYTHON_OVOS_CORE_VERSION = e4cabf257c278e183d5c77aaaa3c920028e4f51f
# PYTHON_OVOS_CORE_SITE = $(call github,OpenVoiceOS,ovos-core,$(PYTHON_OVOS_CORE_VERSION))
# PYTHON_OVOS_CORE_SETUP_TYPE = setuptools
# PYTHON_OVOS_CORE_LICENSE_FILES = LICENSE
# PYTHON_OVOS_CORE_ENV = MYCROFT_LOOSE_REQUIREMENTS=true
# 
# $(eval $(python-package))
# 



