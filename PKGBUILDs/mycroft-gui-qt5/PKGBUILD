_gh_org=OpenVoiceOS
_gh_proj=mycroft-gui-qt5
pkgname=mycroft-gui-qt5
provides=("mycroft-gui")
conflicts=("mycroft-gui")
_commit='e3e87b22be62e009ff227a86d6e4731e4ad5a5d8'
pkgver="1.0.1"
pkgrel=1
pkgdesc='OVOS fork of `mycroft-gui`, the KDE-based visual interface for working with Mycroft. This is the stable version based on Qt5.'
arch=('x86_64' 'aarch64' 'armv7h')
url='https://github.com/OpenVoiceOS/mycroft-gui-qt5'
license=('Apache License 2.0')
depends=(kirigami2 kirigami-addons qt5-websockets qt5-declarative qt5-multimedia qt5-quickcontrols2 qt5-base)
optdepends=('qt5-lottie: QT5 animation support' 
'qt5-webview: webview support')
makedepends=(pkgconf cmake extra-cmake-modules kio kio-extras plasma-framework qt5-webview)

source=("https://github.com/$_gh_org/$_gh_proj/archive/$_commit.tar.gz"
        "StatusIndicator.qml")
sha256sums=('5b8f9a714141dee31902f4168fed1bca170dd2809b84d50686a177bc1ca2c0cc'
            '582f45a39cd79fed297213edaa89ab8a4d02d98271d4135103c997543569ea16')

prepare() {
    cd "$srcdir"
    for patch in "../"*.patch; do
        if [ -f "$patch" ]; then
          echo "Applying patch $patch"
          patch --forward --strip=1 --input="${PWD}/${patch}" --directory="${srcdir}/${pkgname}-${_commit}"
        fi
    done

    cp StatusIndicator.qml "${srcdir}/${pkgname}-${_commit}/import/qml"
}

build() {
    cd "$srcdir"

    build_dir=$(find . -type f -name "CMakeLists.txt" -exec dirname {} \; | awk 'length < shortest || shortest == 0 { shortest=length; shortest_path=$0 } END { print shortest_path }')
    echo "Build folder is $build_dir"

    cmake -B build -S "$build_dir"  \
        -DCMAKE_BUILD_TYPE='None' -DNDEBUG=ON \
        -DKDE_INSTALL_LIBDIR=lib -DKDE_INSTALL_USE_QT_SYS_PATHS=ON \
        -DCMAKE_SKIP_INSTALL_RPATH=YES \
        -DCMAKE_INSTALL_PREFIX='/usr' \
        -Wno-dev
    cmake --build build
}

# Testing Requres OpenGL Context
# check() {
#    QT_QPA_PLATFORM=offscreen  ctest --test-dir build --output-on-failure
# }

package() {
    cd "$srcdir" 
    echo "Installing $pkgname to $pkgdir"
    DESTDIR="$pkgdir" cmake --install build

    # Optional: Copy documentation files
    if [ -d "$srcdir/$pkgname/docs" ]; then
        mkdir -p "$pkgdir/usr/share/doc/$pkgname"  # Create doc directory
        cp -r "$srcdir/$pkgname/docs" "$pkgdir/usr/share/doc/$pkgname" || true
        chmod 644 "$pkgdir/usr/share/doc/$pkgname"/*.txt  || true # Set read permissions for documentation files
    fi
    
    # Optional: Remove unused files or directories
    # For example, removing unneeded binaries, license files, etc.
    # rm "$pkgdir/usr/bin/unneeded_binary"  # Remove unneeded binary
    # rm "$pkgdir/usr/share/doc/$pkgname/unneeded_license.txt"  # Remove unneeded license file

    # Search for license files in the original source directory
    mkdir -p $pkgdir/usr/share/licenses/$pkgname
    find "$srcdir" -maxdepth 2 -type f -name 'LICENSE*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
    find "$srcdir" -maxdepth 1 -type f -name 'COPYING*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
}

