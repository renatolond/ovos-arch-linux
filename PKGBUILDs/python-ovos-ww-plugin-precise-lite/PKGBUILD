_gh_org=OpenVoiceOS
_gh_proj=ovos-ww-plugin-precise-lite
pkgname=python-ovos-ww-plugin-precise-lite
_name=ovos-ww-plugin-precise-lite
_commit='4068bad0edc1875ba302e690c5d4c570cf74838a'
# the upstream repo has a mismatch between the release tag (0.1.2) in the commit hash (485f1c39cbb9542c9b0885207f33df91313ed565)
# and the version file declaring an alpha version (0.1.2a4) 
# https://github.com/OpenVoiceOS/ovos-ww-plugin-precise-lite/blob/485f1c39cbb9542c9b0885207f33df91313ed565/ovos_ww_plugin_precise_lite/version.py#L6
# which creates an endless rebuild loop in this repo.
# we therefore go to the current dev version of 0.1.3
# Remove this notice when the upstream repo is fixed and the dust settles.
pkgver='0.1.5'
pkgrel=00
pkgdesc='This adds a plugin for precise-lite'
arch=('any')
url='https://github.com/OpenVoiceOS/ovos-ww-plugin-precise-lite/'
license=('Apache License 2.0')
depends=(python 'ovos-precise-lite-models')
conflicts=()
makedepends=(python-build python-installer python-wheel python-setuptools)

#### Automatically generated dependencies. Do not edit.
depends+=(
'python-ovos-plugin-manager>=1.0.0' # ovos-plugin-manager<2.0.0,>=1.0.0
'python-ovos-utils>=0.0.14' # ovos-utils<1.0.0,>=0.0.14
'python-precise-lite-runner>=0.4.1' # precise_lite_runner<1.0.0,>=0.4.1
)
conflicts+=(
'python-ovos-plugin-manager>=2.0.0' # ovos-plugin-manager<2.0.0,>=1.0.0
'python-ovos-utils>=1.0.0' # ovos-utils<1.0.0,>=0.0.14
'python-precise-lite-runner>=1.0.0' # precise_lite_runner<1.0.0,>=0.4.1
)
optdepends+=(
'python-numpy>=1.0' # numpy~=1.0; extra == "tflite"
'python-tensorflow' # tensorflow; extra == "full"
'python-tflite-runtime>=2.0' # tflite-runtime~=2.0; extra == "tflite"
)

#### End of automatically generated dependencies.
source=("https://github.com/$_gh_org/$_gh_proj/archive/$_commit.tar.gz")
sha256sums=('a863f8b4bd66004e5a7221a6170e200677fa914decaf058c24596d36f367120c')

prepare() {
    cd "$srcdir"
    for patch in "../"*.patch; do
        if [ -f "$patch" ]; then
          echo "Applying patch $patch"
          patch --forward --strip=1 --input="${PWD}/${patch}" --directory="${srcdir}/${_name}-${_commit}"
        fi
    done
}

pkgver(){
    cd "$srcdir/$_name-$_commit"
    echo "$(python setup.py --version)"
}

build() {
    cd "$_name-$_commit"
    python -m build --wheel --no-isolation
}

check() {
    cd "$_name-$_commit"

    local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
    local python_version=$(python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')

    # nosetests
    # pytest
}

package() {
    cd "$_name-$_commit"

    echo "Installing $pkgname to $pkgdir"
    # some packages produce multiple wheels, install the one specific to the version of the package
    python -m installer --destdir="$pkgdir" dist/*$pkgver*.whl

    # Optional: Copy documentation files
    if [ -d "$srcdir/$pkgname/docs" ]; then
        mkdir -p "$pkgdir/usr/share/doc/$pkgname"  # Create doc directory
        cp -r "$srcdir/$pkgname/docs" "$pkgdir/usr/share/doc/$pkgname" || true
        chmod 644 "$pkgdir/usr/share/doc/$pkgname"/*.txt  || true # Set read permissions for documentation files
    fi
    
    # Optional: Remove unused files or directories
    # For example, removing unneeded binaries, license files, etc.
    # rm "$pkgdir/usr/bin/unneeded_binary"  # Remove unneeded binary
    # rm "$pkgdir/usr/share/doc/$pkgname/unneeded_license.txt"  # Remove unneeded license file

    # Search for license files in the original source directory
    mkdir -p $pkgdir/usr/share/licenses/$pkgname
    find "$srcdir" -maxdepth 2 -type f -name 'LICENSE*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
    find "$srcdir" -maxdepth 1 -type f -name 'COPYING*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
}
